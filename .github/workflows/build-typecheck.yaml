name: Build python

on:
  workflow_dispatch

jobs:
  build_core:
    name: Build tierkreis package
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Protoc
        uses: arduino/setup-protoc@v3

      - name: build main package
        run: |
          pipx run build[uv] --installer=uv

      - run: pipx twine check dist/*

      - uses: actions/upload-artifact@v3
        with:
          name: core_build
          path: python/dist

  build_wheels:
    name: build on ${{ matrix.platform || matrix.os }} (${{ matrix.target }} - ${{ matrix.manylinux || 'auto' }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        # os: [ubuntu]
        target: [x86_64, aarch64]
        # target: [x86_64]
        manylinux: [auto]
        include:
          - os: ubuntu
            platform: linux
          - os: windows
            ls: dir
          - os: macos
            target: aarch64


          # - os: windows
          #   ls: dir
          #   target: i686
          #   python-architecture: x86
          # - os: ubuntu
          #   platform: linux
          #   target: i686
          # musllinux
          # - os: ubuntu
          #   platform: linux
          #   target: x86_64
          #   manylinux: musllinux_1_1
          # - os: ubuntu
          #   platform: linux
          #   target: aarch64
          #   manylinux: musllinux_1_1
        exclude:
          # Windows on arm64 only supports Python 3.11+
          - os: windows
            target: aarch64
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3


      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux || 'auto' }}
          container: ${{ matrix.container }}
          args: --release --out dist --interpreter ${{ matrix.interpreter || '3.10 3.11 3.12' }} -m type_check/Cargo.toml
          rust-toolchain: stable
          rustup-components: "rustfmt"

      - run: ${{ matrix.ls || 'ls -lh' }} dist/

      - run: pipx twine check dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: type_wheels
          path: dist


  test_wheels:
    needs: [build_core, build_wheels]
    name: test on ${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.python-version }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python-version: ['3.10', '3.11', '3.12']
        include:
          - os: ubuntu
            platform: manylinux
            arch: x86_64
          - os: windows
            platform: win
            arch: amd64
          - os: macos
            platform: macos
            arch: x86_64

    runs-on: ${{ matrix.os }}-latest
    defaults:
      run:
        working-directory: python
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3


      - name: Download core
        uses: actions/download-artifact@v4
        with:
          name: core_build
          path: python/dist/
      - name: Install
        run: |
          pip install $(find dist -type f -iname "tierkreis-*.whl")'[docker,telemetry,commontypes,sc22-example]'
          pip install pytest
        shell: bash
      - name: Test with pytest
        run: |
          pytest

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: type_wheels
          path: python/type_wheels/
      - name: Install type_check
        run: |
          export PYVER=$(echo ${{ matrix.python-version }} | tr -d .)
          export PLATFORM=${{ matrix.platform || matrix.os }}
          export WHL=$(find type_wheels -type f -iname "tierkreis_typecheck*${PYVER}*-${PLATFORM}*${{ matrix.arch }}.whl")
          pip install $WHL
        shell: bash
      - name: Test with pytest
        run: |
          pytest
