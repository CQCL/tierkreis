# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: python_worker.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class RunPythonRequest(betterproto.Message):
    module: str = betterproto.string_field(1)
    function: str = betterproto.string_field(2)
    inputs: Dict[str, "_graph__.Value"] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class RunPythonResponse(betterproto.Message):
    outputs: Dict[str, "_graph__.Value"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


class PythonWorkerStub(betterproto.ServiceStub):
    async def run_python(
        self,
        *,
        module: str = "",
        function: str = "",
        inputs: Dict[str, "_graph__.Value"] = None,
    ) -> "RunPythonResponse":

        request = RunPythonRequest()
        request.module = module
        request.function = function
        request.inputs = inputs

        return await self._unary_unary(
            "/tierkreis.python_worker.PythonWorker/RunPython",
            request,
            RunPythonResponse,
        )


class PythonWorkerBase(ServiceBase):
    async def run_python(
        self, module: str, function: str, inputs: Dict[str, "_graph__.Value"]
    ) -> "RunPythonResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_run_python(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "module": request.module,
            "function": request.function,
            "inputs": request.inputs,
        }

        response = await self.run_python(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/tierkreis.python_worker.PythonWorker/RunPython": grpclib.const.Handler(
                self.__rpc_run_python,
                grpclib.const.Cardinality.UNARY_UNARY,
                RunPythonRequest,
                RunPythonResponse,
            ),
        }


from .. import graph as _graph__
