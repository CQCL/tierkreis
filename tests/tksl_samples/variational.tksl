use pytket::{Circuit, load_circuit_json, substitute_symbols, execute, z_expectation};


type ParamsLists = Vector<Vector<Float>>;

Graph run_circuit(circ: Circuit, params: ParamsLists) -> (value: Float) {

    subs <- substitute_symbols(circ: circ, symbs: ["a"], params: params);
    res <- execute(push([], subs), [1000], "AerBackend");
    res <- pop(res);
    z_exp <- z_expectation(dist:res.item);
    output(value: z_exp.value);

}

Graph main() -> (final_params: ParamsLists) {

    ansatz <- load_circuit_json(read_file!("tests/tksl_samples/symb_circ.json"));

    objective <- partial(thunk: run_circuit, circ: ansatz);

    final <- loop (value: make_struct(params: [[1.2]], status: -1, obj: objective.value)) {
        args <- unpack_struct(value);
        params_copy <- copy(args.params);
        pred <- scipy::minimize_checker(params_copy.value_0, args.status);
        res <- if (pred.pred; params: params_copy.value_1, obj: args.obj) {
            objs <- copy(obj);

            min_n <- scipy::minimize(func: objs.value_0, params: params);

            output (value: tag(continue: make_struct(params: min_n.params, status: min_n.status, obj: objs.value_1)));
        } else {
            output (value: tag(break: params));
        };

        output (value: res.value);
    };

    output(final.value);
}
