start: declaration+

declaration:
    | function -> func
    | "type" CNAME "=" type "\n" -> type_alias

function: "def" CNAME "(" f_param_list ")" "->" "(" f_param_list ")" code_block
code_block: "{" instruction+ "}"

type:
    | TYPE_INT
    | TYPE_BOOL
    | TYPE_STR
    | TYPE_FLOAT
    | TYPE_CIRCUIT
    | TYPE_PAIR "<" type "," type ">"
    | TYPE_MAP "<" type "," type ">"
    | TYPE_VEC "<" type ">"
    | TYPE_STRUCT "<" f_param_list ">"
    | CNAME -> alias

f_param: CNAME ":" type
// f_param_list : cs_list{f_param}
f_param_list :  (f_param ("," f_param)*)?

instruction:
    | node_inputs "->" CNAME "\n" -> node
    | "output" "(" arglist ")" -> output
    | "const" CNAME "=" const "\n" -> const_decl
    | "if" "(" outport ";" named_map? ")" code_block "else" code_block  "->" CNAME "\n" -> if_block
    | "while" "(" named_map? ")" code_block "do" code_block  "->" CNAME "\n" -> loop


node_inputs:
    | f_name "(" arglist? ")" -> func_call
    | outport "(" named_map ")" -> thunk

arglist:
    | named_map -> named_map
    | outport ("," outport)* -> positional

port_map: INPORT ":" outport
named_map: port_map ("," port_map)*

f_name:
    | CNAME -> local
    | CNAME "::" CNAME -> namespace

const:
    | BOOL -> bool
    | SIGNED_INT -> int
    | SIGNED_FLOAT -> float
    | STRING -> str
    | struct_id "{" const_assign ("," const_assign)* "}" -> struct
    | "[" (const ("," const)*)?  "]" -> vec

const_assign: CNAME ":" const
struct_id:
    | "struct" -> anon
    | CNAME -> named

BOOL: ("True" | "False")

// TRUE: "true"
// FALSE: "false"

INPORT: CNAME

outport:
    | CNAME "." CNAME -> node_output
    | node_inputs -> nested
    | const -> const_port
    | CNAME -> name

COMMENT: SH_COMMENT
CNAME: /(?!(True|False)\b)[a-zA-Z_]\w*/
// CNAME: /[a-zA-Z_]\w*/

TYPE_INT: "int"
TYPE_BOOL: "bool"
TYPE_FLOAT: "float"
TYPE_STR: "str"
TYPE_PAIR: "pair"
TYPE_MAP: "map"
TYPE_VEC: "vec"
TYPE_STRUCT: "struct"
TYPE_CIRCUIT: "circuit"

// %import common.CNAME
%import common.SIGNED_INT
%import common.SIGNED_FLOAT
%import common.WS
%import python.STRING
%import common.SH_COMMENT

%ignore COMMENT
%ignore WS
