{% from "macros/head.html" import head_macro with context %}
{% from "macros/nav.html" import nav_macro with context %}
<html>

<head>
  {{ head_macro() }}
  <title>Tierkreis visualization: EVAL node</title>
  <script src="/static/vis-network.min.js"></script>
  <script src="/static/utils.js"></script>
  <script src="/static/network.js"></script>
  <script src="/static/eventstream.js"></script>
</head>

<body class="bg-neutral-100 relative">
  {{ nav_macro(breadcrumbs) }}

  <ul class=" absolute bottom-6 right-6 rounded-lg bg-white shadow-lg border-neutral-200 p-4 flex-shrink grid grid-cols-2 whitespace-nowrap gap-x-5 ">

    <li class="contents">
      <div class="w-3 h-3 bg-neutral-300"></div>
      <div>Not Started</div>
    </li>
    <li class="contents">
      <div class="w-3 h-3 bg-amber-300"></div>
      <div>Running</div>
    </li>
    <li class="contents">
      <div class="w-3 h-3 bg-green-300"></div>
      <div>Finished</div>
    </li>
    </ul>

  <div id="mynetwork"></div>

  <script type="text/javascript">
    let [network, nodes, edges] = createNetwork({{ nodes|safe }}, {{ edges|safe }}, "N");


    network.setOptions({
      nodes: { font: { size: 16 } },
      edges: { font: { size: 16 } },
      layout:  {
        randomSeed: 0,
        hierarchical: {
          direction: "UD",
          sortMethod: "directed",
          levelSeparation: 150,
          nodeSpacing: 800,
          shakeTowards: "leaves",
          edgeMinimization: false
        }
      },
      physics: {
        enabled: false,
        stabilization: {
          enabled: true,
          iterations: 10000,
        },
        solver: "hierarchicalRepulsion",
        hierarchicalRepulsion: {
          centralGravity: 0.0,
          springLength: 100,
          springConstant: 0.01,
          nodeDistance: 350,
          damping: 1,
          avoidOverlap: 0
        }
      },
    });
    connectToStream("{{ url|safe }}", nodes, edges);
  </script>
</body>

</html>

